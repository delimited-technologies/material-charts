// @flow weak
/* eslint react/no-multi-comp: "off", max-len: "off" */

import { interpolate } from 'd3-interpolate';
import { scaleOrdinal } from 'd3-scale';
import { arc, pie } from 'd3-shape';
import Surface from 'docs/src/components/Surface';
import React, { PureComponent } from 'react';
import NodeGroup from 'resonance/NodeGroup';

const colors = scaleOrdinal()
  .range([
    '#6C6B74',
    '#2E303E',
    '#9199BE',
    '#54678F',
    '#212624',
    '#3A4751',
    '#1E272E',
    '#0A151D',
    '#030C12',
    '#253517',
    '#5D704E',
    '#324027',
    '#19280C',
    '#0D1903',
  ]);

// **************************************************
//  SVG Layout
// **************************************************
const view = [1000, 250];      // [width, height]
const trbl = [10, 10, 10, 10]; // [top, right, bottom, left] margins

const dims = [ // Adjusted dimensions [width, height]
  view[0] - trbl[1] - trbl[3],
  view[1] - trbl[0] - trbl[2],
];

// **************************************************
//  Mock Data
//  Data is being generated by Math.random in the
//  constructor and randomized in update
// **************************************************
const mockData = [
  {
    name: 'Linktype',
  }, {
    name: 'Quaxo',
  }, {
    name: 'Skynoodle',
  }, {
    name: 'Realmix',
  }, {
    name: 'Jetpulse',
  }, {
    name: 'Chatterbridge',
  }, {
    name: 'Riffpedia',
  }, {
    name: 'Layo',
  }, {
    name: 'Oyoba',
  }, {
    name: 'Ntags',
  },
];

const getArc = pie()
  .value((d) => d.value)
  .sort(null);

const arcPath = arc()
  .innerRadius((dims[1] / 3.5))
  .outerRadius((dims[1] / 2));

class Example extends PureComponent {
  constructor(props) {
    super(props);

    const data = mockData.map((n) => {
      return { ...n, value: Math.random() };
    });

    const newArcs = getArc(data);
    this.state = {
      data,
      arcs: newArcs,
      arcsCache: newArcs.reduce((m, n) => {
        return Object.assign(m, { [n.data.name]: n });
      }, {}),
    };
  }

  update = () => {
    this.setState((prevState) => {
      const data = prevState.data.map((n) => {
        return { ...n, value: Math.random() };
      });

      return {
        data,
        arcs: getArc(data),
      };
    });
  };

  arcTween = (beg, end, name) => {
    const i = interpolate(beg, end);

    return (t) => {
      this.setState((prevState) => {
        return {
          ...prevState,
          arcsCache: { ...prevState.arcsCache, [name]: i(t) },
        };
      });
      return arcPath(i(t));
    };
  };

  render() {
    const { arcs, arcsCache } = this.state;

    return (
      <div>
        <button onClick={this.update}>
          Randomize
        </button>
        <Surface view={view} trbl={trbl}>
          <g transform={`translate(${dims[0] / 2}, ${dims[1] / 2})`}>
            <NodeGroup
              data={arcs}
              keyAccessor={(d) => d.data.name}

              start={(d) => ({
                fill: colors(d.data.name),
                d: arcPath(d),
                opacity: 0,
              })}

              enter={() => ({
                opacity: [1],
                timing: { duration: 1500 },
              })}

              update={(d) => ({
                opacity: [1],
                d: this.arcTween(arcsCache[d.data.name], d, d.data.name),
                timing: { duration: 1500 },
              })}

              leave={(d, index, remove) => {
                remove();
              }}

              render={(data, state) => {
                return (
                  <path {...state} />
                );
              }}
            />
          </g>

        </Surface>
      </div>
    );
  }
}

export default Example;
